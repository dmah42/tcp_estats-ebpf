// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTcpestats returns the embedded CollectionSpec for tcpestats.
func loadTcpestats() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TcpestatsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tcpestats: %w", err)
	}

	return spec, err
}

// loadTcpestatsObjects loads tcpestats and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *tcpestatsObjects
//     *tcpestatsPrograms
//     *tcpestatsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTcpestatsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTcpestats()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tcpestatsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpestatsSpecs struct {
	tcpestatsProgramSpecs
	tcpestatsMapSpecs
}

// tcpestatsSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpestatsProgramSpecs struct {
	TcpCreateOpenreqChild *ebpf.ProgramSpec `ebpf:"tcp_create_openreq_child"`
	TcpInitSock           *ebpf.ProgramSpec `ebpf:"tcp_init_sock"`
}

// tcpestatsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpestatsMapSpecs struct {
	AppTable        *ebpf.MapSpec `ebpf:"app_table"`
	ConnectionTable *ebpf.MapSpec `ebpf:"connection_table"`
	ExtrasTable     *ebpf.MapSpec `ebpf:"extras_table"`
	GlobalTable     *ebpf.MapSpec `ebpf:"global_table"`
	PathTable       *ebpf.MapSpec `ebpf:"path_table"`
	PerfTable       *ebpf.MapSpec `ebpf:"perf_table"`
	StackTable      *ebpf.MapSpec `ebpf:"stack_table"`
}

// tcpestatsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTcpestatsObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpestatsObjects struct {
	tcpestatsPrograms
	tcpestatsMaps
}

func (o *tcpestatsObjects) Close() error {
	return _TcpestatsClose(
		&o.tcpestatsPrograms,
		&o.tcpestatsMaps,
	)
}

// tcpestatsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTcpestatsObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpestatsMaps struct {
	AppTable        *ebpf.Map `ebpf:"app_table"`
	ConnectionTable *ebpf.Map `ebpf:"connection_table"`
	ExtrasTable     *ebpf.Map `ebpf:"extras_table"`
	GlobalTable     *ebpf.Map `ebpf:"global_table"`
	PathTable       *ebpf.Map `ebpf:"path_table"`
	PerfTable       *ebpf.Map `ebpf:"perf_table"`
	StackTable      *ebpf.Map `ebpf:"stack_table"`
}

func (m *tcpestatsMaps) Close() error {
	return _TcpestatsClose(
		m.AppTable,
		m.ConnectionTable,
		m.ExtrasTable,
		m.GlobalTable,
		m.PathTable,
		m.PerfTable,
		m.StackTable,
	)
}

// tcpestatsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTcpestatsObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpestatsPrograms struct {
	TcpCreateOpenreqChild *ebpf.Program `ebpf:"tcp_create_openreq_child"`
	TcpInitSock           *ebpf.Program `ebpf:"tcp_init_sock"`
}

func (p *tcpestatsPrograms) Close() error {
	return _TcpestatsClose(
		p.TcpCreateOpenreqChild,
		p.TcpInitSock,
	)
}

func _TcpestatsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed tcpestats_bpfeb.o
var _TcpestatsBytes []byte
